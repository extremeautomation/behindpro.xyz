{
    "componentChunkName": "component---src-layout-layoutinner-js",
    "path": "/windows",
    "result": {"pageContext":{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"windows","fm":{"category":"Operating Systems","title":"Most Popular Desktop OS in the World by Microsoft","description":"Microsoft Windows, commonly referred to as Windows, is a group of several proprietary graphical operating system families, all of which are developed and marketed by Microsoft. Each family caters to a certain sector of the computing industry. Active Microsoft Windows families include Windows NT and Windows IoT; these may encompass subfamilies, (e.g. Windows Server or Windows Embedded Compact) (Windows CE). Defunct Microsoft Windows families include Windows 9x, Windows Mobile and Windows Phone.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"},"menu":{"Configuration Managers":[{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// In your gatsby-config.js</span>\n<span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">gatsby-transformer-remark</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">gatsby-remark-prismjs</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>","page":"ansible","fm":{"category":"Configuration Managers","title":"Ansible Configuration Management Tool","description":"Ansible is an open-source software provisioning, configuration management, and application-deployment tool enabling infrastructure as code. It runs on many Unix-like systems, and can configure both Unix-like systems as well as Microsoft Windows. It includes its own declarative language to describe system configuration. Ansible was written by Michael DeHaan and acquired by Red Hat in 2015. Ansible is agentless, temporarily connecting remotely via SSH or Windows Remote Management (allowing remote PowerShell execution) to do its tasks.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"gradle","fm":{"category":"Configuration Managers","title":"Gradle project","description":"Gradle is a build automation tool for multi-language software development. It controls the development process in the tasks of compilation and packaging to testing, deployment, and publishing. Supported languages include Java (as well as Kotlin, Groovy, Scala), C/C++, and JavaScript. It also collects statistical data about the usage of software libraries around the globe.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"maven","fm":{"category":"Configuration Managers","title":"Maven a software tool for build automation","description":"Maven is a build automation tool used primarily for Java projects. Maven can also be used to build and manage projects written in C#, Ruby, Scala, and other languages. The Maven project is hosted by the Apache Software Foundation, where it was formerly part of the Jakarta Project.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"puppet","fm":{"category":"Configuration Managers","title":"Puppet is produced by Puppet, Inc, founded by Luke Kanies in 2005","description":"In computing, Puppet is a software configuration management tool which includes its own declarative language to describe system configuration. It is a model-driven solution that requires limited programming knowledge to use.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"terraform","fm":{"category":"Configuration Managers","title":"TerraForm - Configuration Manager","description":"Terraform is an open-source infrastructure as code software tool created by HashiCorp. Users define and provide data center infrastructure using a declarative configuration language known as HashiCorp Configuration Language (HCL), or optionally JSON.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}}],"Containers":[{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"docker","fm":{"category":"Containers","title":"Docker Container Management Tool","description":"Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software in packages called containers. The service has both free and premium tiers. The software that hosts the containers is called Docker Engine. It was first started in 2013 and is developed by Docker, Inc.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}}],"Continuous Delivery":[{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"argo","fm":{"category":"Continuous Delivery","title":"Declarative continuous deployment for Kubernetes","description":"Argo consists of a set of open source tools for deploying and running applications and workloads on Kubernetes, including Argo Workflows (Kubernetes-native workflow engine supporting DAG and step-based workflows), Argo CD (Declarative continuous delivery with a fully-loaded UI), Argo Rollouts (Advanced Kubernetes deployment strategies such as Canary and Blue-Green made easy), Argo Events (Event based dependency management for Kubernetes). In addition, argoproj-labs is a separate GitHub org for community contributions related to the Argo ecosystem.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"jenkins","fm":{"category":"Continuous Delivery","title":"Jenkins Configuration Tool","description":"Jenkins is an open source automation server. It helps automate the parts of software development related to building, testing, and deploying, facilitating continuous integration and continuous delivery. It is a server-based system that runs in servlet containers such as Apache Tomcat. It supports version control tools, including AccuRev, CVS, Subversion, Git, Mercurial, Perforce, ClearCase and RTC, and can execute Apache Ant, Apache Maven and sbt based projects as well as arbitrary shell scripts and Windows batch commands.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}}],"HTTP Tools":[{"html":"<h1>What is Curl</h1>\n<p>Curl is a tool for transferring data from or to a server. It supports dozens of Internet protocols among them are: HTTP, HTTPS, FTP, FTPS, SFTP, SCP and SMB. Curl has support for HTTP and HTTPS proxies getting HTTP links. But for other protocols usually SOCKS4 or SOCKS5 proxies are used.</p>\n<h1>Configuration</h1>\n<p>The simpliest way to route Curl traffic through proxy is to add command line option <code class=\"language-text\">-x</code> to set up proxy location and protocol, and to add command line option <code class=\"language-text\">-U</code> for proxies that need authorisation in format:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-x</span> <span class=\"token string\">\"[protocol://]host[:port]\"</span> <span class=\"token parameter variable\">-U</span> <span class=\"token string\">\"login:password\"</span> <span class=\"token parameter variable\">-s</span> https://behindpro.xyz/testfile <span class=\"token operator\">|</span> figlet</code></pre></div>\n<p>Curl supports protocols: <code class=\"language-text\">https://</code> or <code class=\"language-text\">http://</code> for HTTP resources and <code class=\"language-text\">socks4://</code> or <code class=\"language-text\">socks5://</code> schemes for all type of resources.</p>","page":"curl","fm":{"category":"HTTP Tools","title":"Curl","description":"Curl is a tool for transferring data from or to a server.","keywords":"Curl, Proxy","date":"2022-01-01T00:00:00.000Z"}},{"html":"<h2>What is Wget</h2>\n<p>GNU Wget is a free utility for non-interactive download of files from the Web. It supports HTTP, HTTPS, and FTP protocols, as well as retrieval through HTTP proxies.</p>\n<h2>Configuration</h2>\n<p>There are several ways to route Wget traffic through a proxy.</p>\n<p>If you need only one time solution then the easiest way is to pass environment variable in the command line executing Wget:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span>https://username:password@proxy_host:proxy_port <span class=\"token function\">wget</span> <span class=\"token parameter variable\">-qO</span> - https://behindpro.xyz/testfile <span class=\"token operator\">|</span> figlet</code></pre></div>\n<p>As well you can omit username and password if your proxy does not need authorisation:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span>https://proxy_host:proxy_port <span class=\"token function\">wget</span> <span class=\"token parameter variable\">-qO</span> - https://behindpro.xyz/testfile <span class=\"token operator\">|</span> figlet</code></pre></div>\n<p>Remember to change environment variable from <code class=\"language-text\">https_proxy</code> to <code class=\"language-text\">http_proxy</code> if you are downloading file over HTTP protocol:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span>http://username:password@proxy_host:proxy_port <span class=\"token function\">wget</span> <span class=\"token parameter variable\">-qO</span> - http://behindpro.xyz/testfile <span class=\"token operator\">|</span> figlet</code></pre></div>\n<p>But if you are using Wget through proxy on the regular basis it is more convenient to add some lines to Wget configuration file located at <code class=\"language-text\">/etc/wgetrc</code> (or <code class=\"language-text\">~/.wgetrc</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">use_proxy</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">on</span>\n<span class=\"token key attr-name\">http_proxy</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">proxy_host:proxy_port</span>\n<span class=\"token key attr-name\">https_proxy</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">proxy_host:proxy_port</span></code></pre></div>\n<p>If you need wider protocol support or support for SOCKS proxy you need to consider to use <a href=\"/curl\">Curl</a>: more powerful tool for transfering files over Internet.</p>","page":"wget","fm":{"category":"HTTP Tools","title":"Wget","description":"GNU Wget is a free utility for non-interactive download of files from the Web. It supports HTTP, HTTPS, and FTP protocols, as well as retrieval through HTTP proxies.","keywords":"wget, proxy","date":"2022-01-01T00:00:00.000Z"}}],"Operating Systems":[{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"debian","fm":{"category":"Operating Systems","title":"Debian Linux","description":"Debian also known as Debian GNU/Linux, is a GNU/Linux distribution composed of free and open-source software, developed by the community-supported Debian Project, which was established by Ian Murdock on August 16, 1993. The first version of Debian (0.01) was released on September 15, 1993, and its first stable version (1.1) was released on June 17, 1996. The Debian Stable branch is the most popular edition for personal computers and servers. Debian is also the basis for many other distributions, most notably Ubuntu.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"macos","fm":{"category":"Operating Systems","title":"MacOS Operating System is derivity of BSD System","description":"macOS (previously Mac OS X and later OS X) is a Unix operating system developed and marketed by Apple Inc. since 2001. It is the primary operating system for Apple's Mac computers. Within the market of desktop and laptop computers it is the second most widely used desktop OS, after Microsoft Windows and ahead of Chrome OS.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"redhat","fm":{"category":"Operating Systems","title":"RedHat Linux is OS for Enterprise customers and Linux users","description":"Red Hat, Inc. is an American IBM subsidiary software company that provides open source software products to enterprises. Founded in 1993, Red Hat has its corporate headquarters in Raleigh, North Carolina, with other offices worldwide.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"ubuntu","fm":{"category":"Operating Systems","title":"Debian Based Linux Operating System","description":"Ubuntu (/ʊˈbʊntuː/ (listen) uu-BUUN-too) is a Linux distribution based on Debian and composed mostly of free and open-source software. Ubuntu is officially released in three editions Desktop, Server, and Core for Internet of things devices and robots. All the editions can run on the computer alone, or in a virtual machine. Ubuntu is a popular operating system for cloud computing, with support for OpenStack. Ubuntu's default desktop has been GNOME since version 17.10.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"windows","fm":{"category":"Operating Systems","title":"Most Popular Desktop OS in the World by Microsoft","description":"Microsoft Windows, commonly referred to as Windows, is a group of several proprietary graphical operating system families, all of which are developed and marketed by Microsoft. Each family caters to a certain sector of the computing industry. Active Microsoft Windows families include Windows NT and Windows IoT; these may encompass subfamilies, (e.g. Windows Server or Windows Embedded Compact) (Windows CE). Defunct Microsoft Windows families include Windows 9x, Windows Mobile and Windows Phone.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}}],"Package Managers":[{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"apt","fm":{"category":"Package Managers","title":"Debian Apt Package Manager","description":"Advanced package tool, or APT, is a free-software user interface that works with core libraries to handle the installation and removal of software on Debian, and Debian-based Linux distributions. APT simplifies the process of managing software on Unix-like computer systems by automating the retrieval, configuration and installation of software packages, either from precompiled files or by compiling source code.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"choclatey","fm":{"category":"Package Managers","title":"The Package Manager for Windows, Modern Software Automation","description":"Many IT teams still rely on manual configurations, custom scripts, golden images or outdated tools to manage Windows infrastructure. This results in errors and slow deployments, or worse - unpatched environments that leave you susceptible to security incidents.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"helm","fm":{"category":"Package Managers","title":"Helm Package Manager","description":"Helm is a package manager that helps developers \"easily manage and deploy applications onto the Kubernetes cluster\". It joined the incubating level in June 2018 and graduated in April 2020.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"kubernetes","fm":{"category":"Package Managers","title":"Kubernetes is an open-source container orchestration system","description":"Kubernetes is an open-source container orchestration system for automating software deployment, scaling, and management. Google originally designed Kubernetes, but the Cloud Native Computing Foundation now maintains the project.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"nuget","fm":{"category":"Package Managers","title":"NuGet is a package manager for developers","description":"NuGet is a package manager designed to enable developers to share reusable code. It is a software as a service solution whose client app is free and open-source. The Outercurve Foundation initially created it under the name NuPack. Since its introduction in 2010, NuGet has evolved into a larger ecosystem of tools and services.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"yum","fm":{"category":"Package Managers","title":"Yum Package Manager","description":"The Yellowdog Updater, Modified (YUM) is a free and open-source command-line package-management utility for computers running the Linux operating system using the RPM Package Manager. Though YUM has a command-line interface, several other tools provide graphical user interfaces to YUM functionality.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}}],"Programming Languages":[{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"c-sharp","fm":{"category":"Programming Languages","title":"Programming Language C# .NET","description":"C# is a general-purpose, multi-paradigm programming language. C# encompasses static typing, strong typing, lexically scoped, imperative, declarative, functional, generic, object-oriented (class-based), and component-oriented programming disciplines.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"go","fm":{"category":"Programming Languages","title":"Google Go","description":"Go is a statically typed, compiled programming language designed at Google by Robert Griesemer, Rob Pike, and Ken Thompson.It is syntactically similar to C, but with memory safety, garbage collection, structural typing, and CSP-style concurrency. It is often referred to as Golang because of its former domain name, golang.org, but its proper name is Go.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"java","fm":{"category":"Programming Languages","title":"Java Configuration Tool","description":"Java is a high-level, class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. It is a general-purpose programming language intended to let programmers write once, run anywhere (WORA), meaning that compiled Java code can run on all platforms that support Java without the need to recompile. Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM) regardless of the underlying computer architecture. The syntax of Java is similar to C and C++, but has fewer low-level facilities than either of them. The Java runtime provides dynamic capabilities (such as reflection and runtime code modification) that are typically not available in traditional compiled languages. As of 2019, Java was one of the most popular programming languages in use according to GitHub, particularly for client–server web applications, with a reported 9 million developers.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"nodejs","fm":{"category":"Programming Languages","title":"Node is based on Chrome V8 JavaScript Engine","description":"Node.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser. Node.js lets developers use JavaScript to write command line tools and for server-side scripting—running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a \"JavaScript everywhere\" paradigm, unifying web-application development around a single programming language, rather than different languages for server-side and client-side scripts.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"php","fm":{"category":"Programming Languages","title":"PHP language is built for Web Development","description":"PHP is a general-purpose scripting language geared toward web development. It was originally created by Danish-Canadian programmer Rasmus Lerdorf in 1994. The PHP reference implementation is now produced by The PHP Group. PHP originally stood for Personal Home Page, but it now stands for the recursive initialism PHP - Hypertext Preprocessor.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"python","fm":{"category":"Programming Languages","title":"Python is a high-level, interpreted, general-purpose programming language","description":"Python is dynamically-typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly procedural), object-oriented and functional programming. It is often described as a \"batteries included\" language due to its comprehensive standard library.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"ruby","fm":{"category":"Programming Languages","title":"Ruby Programming Lanugage","description":"Ruby is an interpreted, high-level, general-purpose programming language which supports multiple programming paradigms. It was designed with an emphasis on programming productivity and simplicity. In Ruby, everything is an object, including primitive data types. It was developed in the mid-1990s by Yukihiro \"Matz\" Matsumoto in Japan.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}}],"Version Managers":[{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"git","fm":{"category":"Version Managers","title":"Git protocol Tool","description":"Git is a software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems).","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}},{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"gitlab","fm":{"category":"Version Managers","title":"GitLab project","description":"GitLab Inc. is the open-core company that provides GitLab, the DevOps software that combines the ability to develop, secure, and operate software in a single application. The open source software project was created by Ukrainian developer Dmitriy Zaporozhets and Dutch developer Sytse Sijbrandij.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}}],"Visualization Tools":[{"html":"<h1>CONFIGURATION</h1>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum habitasse ullamcorper pulvinar nam aenean sed elit morbi nunc. Sit at mauris eget nisl nibh. Vitae sapien sit dictum at turpis laoreet. Lobortis sagittis a laoreet quam.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import (\n\"io/ioutil\"\n\"log\"\n\"net/http\"\n\"net/url\"\n)</code></pre></div>\n<p>Dolor sit amet, consectetur adipiscing elit. Facilisis cursus nibh neque tincidunt a arcu morbi. Hendrerit leo ullamcorper dui interdum ornare lectus. Nulla placerat facilisis vel nisl in tortor. Vel turpis nulla donec augue risus turpis turpis.</p>\n<h1>EXAMPLE 1</h1>\n<p>Consectetur adipiscing elit. In ultricies molestie.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func main() {\n\n//creating the proxyURL\nproxyStr := \"http://localhost:7000\"\nproxyURL, err := url.Parse(proxyStr)\nif err != nil {\nlog.Println(err)\n}\n\n//creating the URL to be loaded through the proxy\nurlStr := \"http://httpbin.org/get\"\nurl, err := url.Parse(urlStr)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Eu viverra dolor eget cursus tortor. Id eros fermentum, amet eros, quisque. Ut vitae mauris proin blandit viverra.</p>\n<h1>EXAMPLE 2</h1>\n<p>Blandit cursus ornare cursus mauris ipsum malesuada consectetur est. Tincidunt nulla nunc tellus ultricies pharetra turpis pellentesque pellentesque leo. Amet tellus tincidunt purus malesuada volutpat, pretium. Eget urna lacinia donec porttitor fermentum sed volutpat. Tellus nullam neque, amet ultrices. Enim sagittis libero eu nisi. Duis justo lectus maecenas ornare risus sit sem. Mi sagittis amet sollicitudin sed amet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//adding the proxy settings to the Transport object\ntransport := &amp;http.Transport{\nProxy: http.ProxyURL(proxyURL),\n}\n\n//adding the Transport object to the http Client\nclient := &amp;http.Client{\nTransport: transport,\n}\n\n//generating the HTTP GET request\nrequest, err := http.NewRequest(\"GET\", url.String(), nil)\nif err != nil {\nlog.Println(err)\n}\n\n//calling the URL\nresponse, err := client.Do(request)\nif err != nil {\nlog.Println(err)\n}</code></pre></div>\n<p>Auctor molestie fermentum, non eu posuere. Mauris in non a egestas. Scelerisque amet, nibh morbi felis, netus. Ultrices netus donec non eget egestas diam fermentum, risus, sem. Tincidunt nulla habitant egestas suspendisse odio sed. Libero, risus, sagittis eget suspendisse egestas dignissim. Sed arcu arcu tincidunt elementum pretium senectus erat. Vitae praesent quis hendrerit viverra turpis amet, faucibus eget. Tortor et sit vulputate diam.</p>","page":"grafana","fm":{"category":"Visualization Tools","title":"Grafana Visualization Tool","description":"Grafana is a multi-platform open source analytics and interactive visualization web application. It provides charts, graphs, and alerts for the web when connected to supported data sources. A licensed Grafana Enterprise version with additional capabilities is also available as a self-hosted installation or an account on the Grafana Labs cloud service. It is expandable through a plug-in system. End users can create complex monitoring dashboards using interactive query builders. Grafana is divided into a front end and back end, written in TypeScript and Go, respectively.","keywords":"Windows, Linux, MacOS","date":"2022-05-21T00:00:00.000Z"}}]}}},
    "staticQueryHashes": []}